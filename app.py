
import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import make_pipeline

# Sample dataset - gi·∫£ l·∫≠p d·ªØ li·ªáu s√°ch t·ª´ Tiki
@st.cache_data
def load_data():
    data = {
        "short_description": [
            "Cu·ªën s√°ch gi√∫p tr·∫ª ph√°t tri·ªÉn t∆∞ duy logic v√† s√°ng t·∫°o",
            "Truy·ªán c·ªï t√≠ch Vi·ªát Nam hay nh·∫•t m·ªçi th·ªùi ƒë·∫°i",
            "H∆∞·ªõng d·∫´n ƒë·∫ßu t∆∞ t√†i ch√≠nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
            "S√°ch k·ªπ nƒÉng m·ªÅm d√†nh cho sinh vi√™n v√† ng∆∞·ªùi ƒëi l√†m",
            "Ti·ªÉu thuy·∫øt trinh th√°m l√¥i cu·ªën v·ªõi nhi·ªÅu plot twist"
        ],
        "categories_name": [
            "S√°ch thi·∫øu nhi", "VƒÉn h·ªçc", "T√†i ch√≠nh", "K·ªπ nƒÉng s·ªëng", "VƒÉn h·ªçc"
        ],
        "inventory_status": [
            "available", "available", "available", "available", "available"
        ],
        "price": [50000, 80000, 120000, 95000, 110000],
        "review_count": [0, 12, 3, 0, 20],
        "stock_item_qty": [100, 30, 50, 200, 15],
        "stock_item_max_sale_qty": [10, 5, 20, 10, 2]
    }
    df = pd.DataFrame(data)
    df["should_discount"] = ((df["review_count"] < 5)).astype(int)
    return df

# Load data v√† hu·∫•n luy·ªán model ngay trong app
df = load_data()
X = df.drop(columns=["should_discount"])
y = df["should_discount"]

numeric_features = ["price", "review_count", "stock_item_qty", "stock_item_max_sale_qty"]
categorical_features = ["inventory_status", "categories_name"]
text_feature = "short_description"

preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numeric_features),
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features),
        ("txt", TfidfVectorizer(max_features=50), text_feature)
    ]
)

pipeline = make_pipeline(preprocessor, RandomForestClassifier(class_weight="balanced", random_state=42))
pipeline.fit(X, y)

# Giao di·ªán ng∆∞·ªùi d√πng
st.title("üìö Tiki - D·ª± ƒëo√°n s·∫£n ph·∫©m c√≥ n√™n gi·∫£m gi√° kh√¥ng")

description = st.text_area("‚úèÔ∏è M√¥ t·∫£ s·∫£n ph·∫©m")
category = st.text_input("üìÇ Ng√†nh h√†ng", "S√°ch thi·∫øu nhi")
inventory_status = st.selectbox("üè∑Ô∏è T√¨nh tr·∫°ng kho", ["available", "out_of_stock"])
price = st.number_input("üí∞ Gi√° (VND)", min_value=1000)
review_count = st.number_input("‚≠ê S·ªë l∆∞·ª£t ƒë√°nh gi√°", min_value=0)
stock_qty = st.number_input("üì¶ S·ªë l∆∞·ª£ng t·ªìn kho", min_value=0)
max_sale_qty = st.number_input("üìà S·ªë l∆∞·ª£ng t·ªëi ƒëa m·ªói ƒë∆°n", min_value=1)

if st.button("üéØ D·ª± ƒëo√°n"):
    input_df = pd.DataFrame([{
        "short_description": description,
        "categories_name": category,
        "inventory_status": inventory_status,
        "price": price,
        "review_count": review_count,
        "stock_item_qty": stock_qty,
        "stock_item_max_sale_qty": max_sale_qty
    }])
    prediction = pipeline.predict(input_df)[0]
    if prediction == 1:
        st.success("‚úÖ N√äN gi·∫£m gi√° ƒë·ªÉ k√≠ch c·∫ßu!")
    else:
        st.info("‚öñÔ∏è KH√îNG c·∫ßn gi·∫£m gi√° l√∫c n√†y.")
